{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "ccbf48d3",
   "metadata": {},
   "source": [
    "## How to generate exact sampling coefficients\n",
    "\n",
    "This how-to guide is intended to show users how they can generate exact sampling coefficients to be used in reconstructing the simulated expectation value of the original circuit.\n",
    "\n",
    "First, we set up a simple cutting problem following the [first tutorial](../tutorials/01_gate_cutting_to_reduce_circuit_width.ipynb)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "dc54656b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from qiskit.circuit.library import efficient_su2\n",
    "from qiskit.quantum_info import SparsePauliOp\n",
    "\n",
    "from qiskit_addon_cutting import (\n",
    "    partition_problem,\n",
    "    generate_cutting_experiments,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "dd147239",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 831.997x294.311 with 1 Axes>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "circuit = efficient_su2(4, entanglement=\"linear\", reps=2)\n",
    "circuit.assign_parameters([0.8] * len(circuit.parameters), inplace=True)\n",
    "observable = SparsePauliOp([\"ZZZZ\"])\n",
    "circuit.draw(\"mpl\", scale=0.8)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0bce456c",
   "metadata": {},
   "source": [
    "Partition the circuit between qubits 1 and 2 by cutting 2 CNOT gates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d4ccf5b8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 684.861x120.4 with 1 Axes>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "partitioned_problem = partition_problem(\n",
    "    circuit=circuit, partition_labels=\"AABB\", observables=observable.paulis\n",
    ")\n",
    "subcircuits = partitioned_problem.subcircuits\n",
    "bases = partitioned_problem.bases\n",
    "subobservables = partitioned_problem.subobservables\n",
    "subcircuits[\"A\"].draw(\"mpl\", scale=0.6)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "44956cbb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 684.982x120.4 with 1 Axes>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subcircuits[\"B\"].draw(\"mpl\", scale=0.6)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fce55187",
   "metadata": {},
   "source": [
    "### Demonstrate how to obtain all weights exactly\n",
    "\n",
    "If you wish to calculate all weights exactly, no matter how small, you can achieve this by passing infinity (`np.inf`) to `num_samples`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "8c56282f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(0.24999999999999992, <WeightType.EXACT: 1>),\n",
       " (0.24999999999999992, <WeightType.EXACT: 1>),\n",
       " (0.24999999999999992, <WeightType.EXACT: 1>),\n",
       " (-0.24999999999999992, <WeightType.EXACT: 1>),\n",
       " (0.24999999999999992, <WeightType.EXACT: 1>),\n",
       " (-0.24999999999999992, <WeightType.EXACT: 1>),\n",
       " (0.24999999999999992, <WeightType.EXACT: 1>),\n",
       " (0.24999999999999992, <WeightType.EXACT: 1>),\n",
       " (0.24999999999999992, <WeightType.EXACT: 1>),\n",
       " (-0.24999999999999992, <WeightType.EXACT: 1>),\n",
       " (0.24999999999999992, <WeightType.EXACT: 1>),\n",
       " (-0.24999999999999992, <WeightType.EXACT: 1>),\n",
       " (0.24999999999999992, <WeightType.EXACT: 1>),\n",
       " (0.24999999999999992, <WeightType.EXACT: 1>),\n",
       " (0.24999999999999992, <WeightType.EXACT: 1>),\n",
       " (-0.24999999999999992, <WeightType.EXACT: 1>),\n",
       " (0.24999999999999992, <WeightType.EXACT: 1>),\n",
       " (-0.24999999999999992, <WeightType.EXACT: 1>),\n",
       " (-0.24999999999999992, <WeightType.EXACT: 1>),\n",
       " (-0.24999999999999992, <WeightType.EXACT: 1>),\n",
       " (-0.24999999999999992, <WeightType.EXACT: 1>),\n",
       " (0.24999999999999992, <WeightType.EXACT: 1>),\n",
       " (-0.24999999999999992, <WeightType.EXACT: 1>),\n",
       " (0.24999999999999992, <WeightType.EXACT: 1>),\n",
       " (0.24999999999999992, <WeightType.EXACT: 1>),\n",
       " (0.24999999999999992, <WeightType.EXACT: 1>),\n",
       " (0.24999999999999992, <WeightType.EXACT: 1>),\n",
       " (-0.24999999999999992, <WeightType.EXACT: 1>),\n",
       " (0.24999999999999992, <WeightType.EXACT: 1>),\n",
       " (-0.24999999999999992, <WeightType.EXACT: 1>),\n",
       " (-0.24999999999999992, <WeightType.EXACT: 1>),\n",
       " (-0.24999999999999992, <WeightType.EXACT: 1>),\n",
       " (-0.24999999999999992, <WeightType.EXACT: 1>),\n",
       " (0.24999999999999992, <WeightType.EXACT: 1>),\n",
       " (-0.24999999999999992, <WeightType.EXACT: 1>),\n",
       " (0.24999999999999992, <WeightType.EXACT: 1>)]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subexperiments, coefficients = generate_cutting_experiments(\n",
    "    circuits=subcircuits,\n",
    "    observables=subobservables,\n",
    "    num_samples=np.inf,\n",
    ")\n",
    "coefficients"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b5fc6579",
   "metadata": {},
   "source": [
    "### Demonstrate how to find the minimum `num_samples` needed to retrieve all exact weights for 2 CNOT cuts\n",
    "\n",
    "When `num_samples` is set to a finite number, each weight whose absolute value is above a threshold of 1 / `num_samples` will be evaluated exactly.  The remaining weights -- those in the tail of the distribution -- will then be sampled from, resulting in at most `num_samples` unique weights.\n",
    "\n",
    "In the case of a CNOT gate -- or any gate equivalent to it up to single-qubit unitaries -- each of the six weights of the quasi-probability decomposition have the same magnitude, so each gets sampled with a probability of $1/6$:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "78539fcc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mapping probabilities for a CNOT decomposition: [0.16666667 0.16666667 0.16666667 0.16666667 0.16666667 0.16666667]\n"
     ]
    }
   ],
   "source": [
    "print(f\"Mapping probabilities for a CNOT decomposition: {bases[0].probabilities}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5770cf75",
   "metadata": {},
   "source": [
    "In this example, we have cut two CNOT gates. Given that the probability of any given mapping in a CNOT decomposition is $1/6$, the probability of any given mapping in the _joint_ distribution combining the two cut CNOT gates is $(1/6)^2$. Therefore, we need to take at least $6^2$ weights in order to retrieve all exact weights from `generate_cutting_experiments`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "f07a6cc3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of samples needed to retrieve exact weights: 36.0\n"
     ]
    }
   ],
   "source": [
    "from qiskit_addon_cutting.qpd import QPDBasis\n",
    "from qiskit.circuit.library.standard_gates import CXGate\n",
    "\n",
    "qpd_basis_cx = QPDBasis.from_instruction(CXGate())\n",
    "\n",
    "\n",
    "def _min_nonzero(seq, /):\n",
    "    \"\"\"Return the minimum value in a sequence, ignoring values near zero.\"\"\"\n",
    "    return min(x for x in seq if not np.isclose(x, 0))\n",
    "\n",
    "\n",
    "num_cx_cuts = 2\n",
    "\n",
    "print(\n",
    "    f\"Number of samples needed to retrieve exact weights: {1 / _min_nonzero(qpd_basis_cx.probabilities)**num_cx_cuts}\"\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "deb6ad1e",
   "metadata": {},
   "source": [
    "#### Observe the coefficient weights returned from `generate_cutting_experiments` are `WeightType.EXACT`\n",
    "\n",
    "Above, we determined 36 samples would trigger the coefficients to be returned as exact. Here we set `num_samples` to exactly 36 to test this."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "43d32869",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(0.25, <WeightType.EXACT: 1>),\n",
       " (0.25, <WeightType.EXACT: 1>),\n",
       " (0.25, <WeightType.EXACT: 1>),\n",
       " (-0.25, <WeightType.EXACT: 1>),\n",
       " (0.25, <WeightType.EXACT: 1>),\n",
       " (-0.25, <WeightType.EXACT: 1>),\n",
       " (0.25, <WeightType.EXACT: 1>),\n",
       " (0.25, <WeightType.EXACT: 1>),\n",
       " (0.25, <WeightType.EXACT: 1>),\n",
       " (-0.25, <WeightType.EXACT: 1>),\n",
       " (0.25, <WeightType.EXACT: 1>),\n",
       " (-0.25, <WeightType.EXACT: 1>),\n",
       " (0.25, <WeightType.EXACT: 1>),\n",
       " (0.25, <WeightType.EXACT: 1>),\n",
       " (0.25, <WeightType.EXACT: 1>),\n",
       " (-0.25, <WeightType.EXACT: 1>),\n",
       " (0.25, <WeightType.EXACT: 1>),\n",
       " (-0.25, <WeightType.EXACT: 1>),\n",
       " (-0.25, <WeightType.EXACT: 1>),\n",
       " (-0.25, <WeightType.EXACT: 1>),\n",
       " (-0.25, <WeightType.EXACT: 1>),\n",
       " (0.25, <WeightType.EXACT: 1>),\n",
       " (-0.25, <WeightType.EXACT: 1>),\n",
       " (0.25, <WeightType.EXACT: 1>),\n",
       " (0.25, <WeightType.EXACT: 1>),\n",
       " (0.25, <WeightType.EXACT: 1>),\n",
       " (0.25, <WeightType.EXACT: 1>),\n",
       " (-0.25, <WeightType.EXACT: 1>),\n",
       " (0.25, <WeightType.EXACT: 1>),\n",
       " (-0.25, <WeightType.EXACT: 1>),\n",
       " (-0.25, <WeightType.EXACT: 1>),\n",
       " (-0.25, <WeightType.EXACT: 1>),\n",
       " (-0.25, <WeightType.EXACT: 1>),\n",
       " (0.25, <WeightType.EXACT: 1>),\n",
       " (-0.25, <WeightType.EXACT: 1>),\n",
       " (0.25, <WeightType.EXACT: 1>)]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subexperiments, coefficients = generate_cutting_experiments(\n",
    "    circuits=subcircuits,\n",
    "    observables=subobservables,\n",
    "    num_samples=36,\n",
    ")\n",
    "coefficients"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
